// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aRANRLPd4otPtCuNvZtsnZ
// Component: 56hRMa50je0H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import LogoKoi from "../../LogoKoi"; // plasmic-import: 27GTtwlekzAr/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsbPzZ2WR5Unx5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bPzZ2wR5unx5/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aRANRLPd4otPtCuNvZtsnZ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 56hRMa50je0H/css

import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: 9_swf-3wm4z8/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: 2y4AtSs_hUhb/icon
import IcBaselineFacebookIcon from "./icons/PlasmicIcon__IcBaselineFacebook"; // plasmic-import: Q-lHd--cKJQT/icon
import RiInstagramFillIcon from "./icons/PlasmicIcon__RiInstagramFill"; // plasmic-import: V3hQkwW9bClo/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  koi?: Flex__<"div">;
  home?: Flex__<"div">;
  hero?: Flex__<"div">;
  nav?: Flex__<"div">;
  frame8?: Flex__<"div">;
  logoKoi?: Flex__<typeof LogoKoi>;
  frame7?: Flex__<"div">;
  yacht1?: Flex__<"div">;
  frame354?: Flex__<"div">;
  frame352?: Flex__<"div">;
  frame259?: Flex__<"div">;
  frame3?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  frame241?: Flex__<"div">;
  frame315?: Flex__<"div">;
  frame260?: Flex__<"div">;
  frame240?: Flex__<"div">;
  frame326?: Flex__<"div">;
  group5?: Flex__<"div">;
  frame322?: Flex__<"div">;
  frame323?: Flex__<"div">;
  frame325?: Flex__<"div">;
  frame324?: Flex__<"div">;
  frame242?: Flex__<"div">;
  frame321?: Flex__<"div">;
  frame316?: Flex__<"div">;
  frame261?: Flex__<"div">;
  frame319?: Flex__<"div">;
  frame317?: Flex__<"div">;
  frame318?: Flex__<"div">;
  frame320?: Flex__<"div">;
  frame244?: Flex__<"div">;
  frame333?: Flex__<"div">;
  frame334?: Flex__<"div">;
  frame335?: Flex__<"div">;
  frame247?: Flex__<"div">;
  frame327?: Flex__<"div">;
  frame328?: Flex__<"div">;
  frame329?: Flex__<"div">;
  frame245?: Flex__<"div">;
  frame330?: Flex__<"div">;
  frame331?: Flex__<"div">;
  frame332?: Flex__<"div">;
  frame246?: Flex__<"div">;
  frame336?: Flex__<"div">;
  frame337?: Flex__<"div">;
  frame338?: Flex__<"div">;
  frame248?: Flex__<"div">;
  frame357?: Flex__<"div">;
  frame356?: Flex__<"div">;
  frame342?: Flex__<"div">;
  frame262?: Flex__<"div">;
  sliderCarousel3?: Flex__<typeof SliderWrapper>;
  frame343?: Flex__<"div">;
  frame344?: Flex__<"div">;
  frame345?: Flex__<"div">;
  frame346?: Flex__<"div">;
  frame347?: Flex__<"div">;
  frame348?: Flex__<"div">;
  frame349?: Flex__<"div">;
  frame350?: Flex__<"div">;
  frame351?: Flex__<"div">;
  frame353?: Flex__<"div">;
  frame355?: Flex__<"div">;
  frame379?: Flex__<"div">;
  frame358?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame359?: Flex__<"div">;
  frame249?: Flex__<"div">;
  frame360?: Flex__<"div">;
  frame361?: Flex__<"div">;
  frame263?: Flex__<"div">;
  frame362?: Flex__<"div">;
  frame363?: Flex__<"div">;
  frame364?: Flex__<"div">;
  mingcuteTimeLine?: Flex__<"div">;
  frame365?: Flex__<"div">;
  frame250?: Flex__<"div">;
  frame366?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame367?: Flex__<"div">;
  frame368?: Flex__<"div">;
  frame369?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame370?: Flex__<"div">;
  mingcuteTimeLine2?: Flex__<"div">;
  frame371?: Flex__<"div">;
  frame10?: Flex__<"div">;
  frame372?: Flex__<"div">;
  mingcuteTimeLine3?: Flex__<"div">;
  frame373?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame374?: Flex__<"div">;
  mingcuteTimeLine4?: Flex__<"div">;
  frame375?: Flex__<"div">;
  frame12?: Flex__<"div">;
  frame376?: Flex__<"div">;
  mingcuteTimeLine5?: Flex__<"div">;
  frame377?: Flex__<"div">;
  frame378?: Flex__<"div">;
  frame264?: Flex__<"div">;
  haveAQuestionGetInTouchWithUs?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  button?: Flex__<typeof AntdButton>;
  footer?: Flex__<"div">;
  frame137?: Flex__<"div">;
  frame135?: Flex__<"div">;
  frame134?: Flex__<"div">;
  icBaselineFacebook?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "koiDifference",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          image: "",
          text: ""
        })
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel3.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel3",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbPzZ2WR5Unx5()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"koi"}
          data-plasmic-override={overrides.koi}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.koi
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            hasGap={true}
            className={classNames(projectcss.all, sty.home)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <div
                data-plasmic-name={"nav"}
                data-plasmic-override={overrides.nav}
                className={classNames(projectcss.all, sty.nav)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame8)}
                >
                  <LogoKoi
                    data-plasmic-name={"logoKoi"}
                    data-plasmic-override={overrides.logoKoi}
                    className={classNames("__wab_instance", sty.logoKoi)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame7"}
                    data-plasmic-override={overrides.frame7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__udzrs
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAbout"] = true
                          ? (() => {
                              const actionArgs = { destination: "#about" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAbout"] != null &&
                          typeof $steps["goToAbout"] === "object" &&
                          typeof $steps["goToAbout"].then === "function"
                        ) {
                          $steps["goToAbout"] = await $steps["goToAbout"];
                        }
                      }}
                    >
                      {"about"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xv8Hq
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToServices"] = true
                          ? (() => {
                              const actionArgs = { destination: "#services" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToServices"] != null &&
                          typeof $steps["goToServices"] === "object" &&
                          typeof $steps["goToServices"].then === "function"
                        ) {
                          $steps["goToServices"] = await $steps["goToServices"];
                        }
                      }}
                    >
                      {"services"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hywgQ
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToProperties"] = true
                          ? (() => {
                              const actionArgs = { destination: "#properties" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToProperties"] != null &&
                          typeof $steps["goToProperties"] === "object" &&
                          typeof $steps["goToProperties"].then === "function"
                        ) {
                          $steps["goToProperties"] = await $steps[
                            "goToProperties"
                          ];
                        }
                      }}
                    >
                      {"properties"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ieA8J
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToBlog"] = true
                          ? (() => {
                              const actionArgs = { destination: "#blog" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToBlog"] != null &&
                          typeof $steps["goToBlog"] === "object" &&
                          typeof $steps["goToBlog"].then === "function"
                        ) {
                          $steps["goToBlog"] = await $steps["goToBlog"];
                        }
                      }}
                    >
                      {"Blog"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jde1P
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToContact"] = true
                          ? (() => {
                              const actionArgs = { destination: "#contact" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToContact"] != null &&
                          typeof $steps["goToContact"] === "object" &&
                          typeof $steps["goToContact"].then === "function"
                        ) {
                          $steps["goToContact"] = await $steps["goToContact"];
                        }
                      }}
                    >
                      {"contact"}
                    </div>
                  </Stack__>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"yacht1"}
                data-plasmic-override={overrides.yacht1}
                className={classNames(projectcss.all, sty.yacht1)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame354"}
                  data-plasmic-override={overrides.frame354}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame354)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame352"}
                    data-plasmic-override={overrides.frame352}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame352)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6MEgB
                      )}
                    >
                      {"Your access to luxury"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame259"}
                      data-plasmic-override={overrides.frame259}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame259)}
                    >
                      <Line1Icon
                        className={classNames(projectcss.all, sty.svg___9QhvO)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___08Ui
                        )}
                      >
                        {"Seamless Relocation and Luxury Concierge Services"}
                      </div>
                      <Line1Icon
                        className={classNames(projectcss.all, sty.svg__lb6J7)}
                        role={"img"}
                      />
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToAbout"] = true
                        ? (() => {
                            const actionArgs = { destination: "#about" };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAbout"] != null &&
                        typeof $steps["goToAbout"] === "object" &&
                        typeof $steps["goToAbout"].then === "function"
                      ) {
                        $steps["goToAbout"] = await $steps["goToAbout"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zc7Wm
                      )}
                    >
                      {"Discover Luxury"}
                    </div>
                  </Stack__>
                </Stack__>
              </div>
              {(() => {
                const child$Props = {
                  arrowColor: true ? "var(--antd-colorBgSpotlight)" : undefined,
                  autoplay: true,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: false,
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"]
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ycIo)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__esZtu)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "667px"
                            : "800px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: "/plasmic/koi/images/slide3Png.png",
                          fullWidth: 1640,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sojco)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__wFez5)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "667px"
                            : "800px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={{
                          src: "/plasmic/koi/images/hero.png",
                          fullWidth: 1640,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sBe0K)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__krby7)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "667px"
                            : "800px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={{
                          src: "/plasmic/koi/images/slide4Png.png",
                          fullWidth: 1640,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ku7V0)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__wJtNu)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "667px"
                            : "800px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/koi/images/slide2Jpg.jpg",
                          fullWidth: 3840,
                          fullHeight: 2560,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame241"}
              data-plasmic-override={overrides.frame241}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame241)}
              id={"about"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame315"}
                data-plasmic-override={overrides.frame315}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame315)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame260"}
                  data-plasmic-override={overrides.frame260}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame260)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qm8Lb
                    )}
                  >
                    {"KOI\u2019s Mission"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__coBq5
                  )}
                >
                  {"our mission"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame240"}
                data-plasmic-override={overrides.frame240}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame240)}
              >
                <Line1Icon
                  className={classNames(projectcss.all, sty.svg___8TBrZ)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cu6F6
                  )}
                >
                  {
                    "KOI Solutions is dedicated to redefining luxury living by delivering personalized concierge and lifestyle management services to clients who value elevated experiences. Our mission is to simplify and enrich our clients' lives with seamless, bespoke services, creating a lifestyle that is truly exceptional."
                  }
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame326"}
              data-plasmic-override={overrides.frame326}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame326)}
            >
              <div
                data-plasmic-name={"group5"}
                data-plasmic-override={overrides.group5}
                className={classNames(projectcss.all, sty.group5)}
              >
                <div
                  data-plasmic-name={"frame322"}
                  data-plasmic-override={overrides.frame322}
                  className={classNames(projectcss.all, sty.frame322)}
                />

                <div
                  data-plasmic-name={"frame323"}
                  data-plasmic-override={overrides.frame323}
                  className={classNames(projectcss.all, sty.frame323)}
                />
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame325"}
                data-plasmic-override={overrides.frame325}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame325)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame324"}
                  data-plasmic-override={overrides.frame324}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame324)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vv9Bh
                    )}
                  >
                    {"About KOI"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame242"}
                    data-plasmic-override={overrides.frame242}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame242)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nvmwM
                      )}
                    >
                      {
                        "KOI Solutions is a premier lifestyle and concierge service provider based in Dubai, specializing in providing high-end, personalized support for individuals, families, and businesses. With a team of experienced professionals and a deep understanding of the luxury market, KOI offers unparalleled service for those seeking to elevate their living experience. Whether it\u2019s seamless relocation assistance or access to exclusive experiences, KOI embodies the essence of luxury"
                      }
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame321"}
              data-plasmic-override={overrides.frame321}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame321)}
              id={"services"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame316"}
                data-plasmic-override={overrides.frame316}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame316)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame261"}
                  data-plasmic-override={overrides.frame261}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame261)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tf9A
                    )}
                  >
                    {"Our Services"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lWpX
                  )}
                >
                  {"what does KOI offer"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame319"}
                data-plasmic-override={overrides.frame319}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame319)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame317"}
                  data-plasmic-override={overrides.frame317}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame317)}
                >
                  <div
                    data-plasmic-name={"frame318"}
                    data-plasmic-override={overrides.frame318}
                    className={classNames(projectcss.all, sty.frame318)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame320"}
                    data-plasmic-override={overrides.frame320}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame320)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zoqQu
                      )}
                    >
                      {"Chauffeur Service"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame244"}
                    data-plasmic-override={overrides.frame244}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame244)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nENk
                      )}
                    >
                      {
                        "Travel in style and comfort with KOI\u2019s chauffeur service, featuring professional drivers and a fleet of high-end vehicles to suit any occasion."
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame333"}
                  data-plasmic-override={overrides.frame333}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame333)}
                >
                  <div
                    data-plasmic-name={"frame334"}
                    data-plasmic-override={overrides.frame334}
                    className={classNames(projectcss.all, sty.frame334)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame335"}
                    data-plasmic-override={overrides.frame335}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame335)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vmtH1
                      )}
                    >
                      {"Relocation Service"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame247"}
                    data-plasmic-override={overrides.frame247}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame247)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mzCD
                      )}
                    >
                      {
                        "Relocating to Dubai is effortless with KOI. From schools to accommodations, we handle every detail for a seamless, personalized transition."
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame327"}
                  data-plasmic-override={overrides.frame327}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame327)}
                >
                  <div
                    data-plasmic-name={"frame328"}
                    data-plasmic-override={overrides.frame328}
                    className={classNames(projectcss.all, sty.frame328)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame329"}
                    data-plasmic-override={overrides.frame329}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame329)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jt9G
                      )}
                    >
                      {"Hotel Booking"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame245"}
                    data-plasmic-override={overrides.frame245}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame245)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Yr4W
                      )}
                    >
                      {
                        "Personalized travel itineraries crafted to fit your unique tastes, ensuring every trip is seamless, memorable, and effortlessly enjoyable"
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame330"}
                  data-plasmic-override={overrides.frame330}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame330)}
                >
                  <div
                    data-plasmic-name={"frame331"}
                    data-plasmic-override={overrides.frame331}
                    className={classNames(projectcss.all, sty.frame331)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame332"}
                    data-plasmic-override={overrides.frame332}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame332)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nnEJp
                      )}
                    >
                      {"Yacht Charter"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame246"}
                    data-plasmic-override={overrides.frame246}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame246)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vHLxs
                      )}
                    >
                      {
                        "Explore Dubai\u2019s coastline in luxury with our yacht booking service\u2014perfect for private gatherings or relaxing escapes."
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame336"}
                  data-plasmic-override={overrides.frame336}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame336)}
                >
                  <div
                    data-plasmic-name={"frame337"}
                    data-plasmic-override={overrides.frame337}
                    className={classNames(projectcss.all, sty.frame337)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame338"}
                    data-plasmic-override={overrides.frame338}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame338)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bqpzb
                      )}
                    >
                      {"Activity Booking"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame248"}
                    data-plasmic-override={overrides.frame248}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame248)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nrBk8
                      )}
                    >
                      {
                        "Access the finest activities Dubai has to offer, from desert safaris to luxury spa days, all curated to match your interests."
                      }
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame357"}
              data-plasmic-override={overrides.frame357}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame357)}
              id={"properties"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame356"}
                data-plasmic-override={overrides.frame356}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame356)}
                id={"properties"}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame342"}
                  data-plasmic-override={overrides.frame342}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame342)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame262"}
                    data-plasmic-override={overrides.frame262}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame262)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__svYv1
                      )}
                    >
                      {"Experience Luxury"}
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kEjeT
                    )}
                  >
                    {"The KOI Difference"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zfpCf
                  )}
                >
                  {"Customized Service Solutions"}
                </div>
                {(() => {
                  const child$Props = {
                    accessibility: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? false
                      : undefined,
                    arrowColor: "#000000",
                    arrows: true,
                    autoplay: false,
                    autoplaySpeed: 3000,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel3", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? true
                      : true,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel3
                    ),
                    cssEase: "linear",
                    dots: false,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel3",
                      "currentSlide"
                    ]),
                    pauseOnFocus: true,
                    ref: ref => {
                      $refs["sliderCarousel3"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel3__slider"],
                    slidesPerRow: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? 1
                      : 3,
                    speed: 300,
                    swipe: hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined,
                    swipeToSlide: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? true
                      : undefined,
                    touchMove: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? true
                      : undefined
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel3.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel3"}
                      data-plasmic-override={overrides.sliderCarousel3}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame343"}
                        data-plasmic-override={overrides.frame343}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame343)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateKoiDifference"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["koiDifference"]
                                  },
                                  operation: 0,
                                  value: {
                                    image: "",
                                    text: "personalized travel Aid"
                                  }
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateKoiDifference"] != null &&
                            typeof $steps["updateKoiDifference"] === "object" &&
                            typeof $steps["updateKoiDifference"].then ===
                              "function"
                          ) {
                            $steps["updateKoiDifference"] = await $steps[
                              "updateKoiDifference"
                            ];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"frame344"}
                          data-plasmic-override={overrides.frame344}
                          className={classNames(projectcss.all, sty.frame344)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iwSA
                          )}
                        >
                          {"Personalized Travel Aid"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame345"}
                        data-plasmic-override={overrides.frame345}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame345)}
                      >
                        <div
                          data-plasmic-name={"frame346"}
                          data-plasmic-override={overrides.frame346}
                          className={classNames(projectcss.all, sty.frame346)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4VlKa
                          )}
                        >
                          {"Exclusive Event Access"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame347"}
                        data-plasmic-override={overrides.frame347}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame347)}
                      >
                        <div
                          data-plasmic-name={"frame348"}
                          data-plasmic-override={overrides.frame348}
                          className={classNames(projectcss.all, sty.frame348)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___902Ct
                          )}
                        >
                          {"Dedicated Client Care"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame349"}
                        data-plasmic-override={overrides.frame349}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame349)}
                      >
                        <div
                          data-plasmic-name={"frame350"}
                          data-plasmic-override={overrides.frame350}
                          className={classNames(projectcss.all, sty.frame350)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r7JqT
                          )}
                        >
                          {"Quality-First Approach"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame351"}
                        data-plasmic-override={overrides.frame351}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame351)}
                      >
                        <div
                          data-plasmic-name={"frame353"}
                          data-plasmic-override={overrides.frame353}
                          className={classNames(projectcss.all, sty.frame353)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mNaiE
                          )}
                        >
                          {"eu curabitur"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame355"}
                        data-plasmic-override={overrides.frame355}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame355)}
                      >
                        <div
                          data-plasmic-name={"frame379"}
                          data-plasmic-override={overrides.frame379}
                          className={classNames(projectcss.all, sty.frame379)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Ywz9
                          )}
                        >
                          {"experience the excellence"}
                        </div>
                      </Stack__>
                    </SliderWrapper>
                  );
                })()}
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame358"}
              data-plasmic-override={overrides.frame358}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame358)}
            >
              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(projectcss.all, sty.frame5)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"frame359"}
                data-plasmic-override={overrides.frame359}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame359)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7LdsL
                  )}
                >
                  {"Why KOI"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame249"}
                  data-plasmic-override={overrides.frame249}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame249)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9Aqtm
                    )}
                  >
                    {
                      "At KOI Solutions, we don\u2019t just deliver services; we understand the unique lifestyle needs of each client and create tailored solutions to enhance their quality of life. Our experienced team anticipates and fulfills the needs of our clients, bringing a deep understanding of luxury and a commitment to making every interaction seamless and exceptional. With KOI, you gain a partner who elevates daily living, curating experiences and services that align with your lifestyle and exceed expectations at every turn."
                    }
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame360"}
              data-plasmic-override={overrides.frame360}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame360)}
              id={"blog"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame361"}
                data-plasmic-override={overrides.frame361}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame361)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame263"}
                  data-plasmic-override={overrides.frame263}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame263)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fcNk
                    )}
                  >
                    {"Latest News & Stories"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uFtHe
                  )}
                >
                  {"Our Blog"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame362"}
                data-plasmic-override={overrides.frame362}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame362)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame363"}
                  data-plasmic-override={overrides.frame363}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame363)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame364"}
                    data-plasmic-override={overrides.frame364}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame364)}
                  >
                    <div
                      data-plasmic-name={"mingcuteTimeLine"}
                      data-plasmic-override={overrides.mingcuteTimeLine}
                      className={classNames(
                        projectcss.all,
                        sty.mingcuteTimeLine
                      )}
                    >
                      <Group4Icon
                        className={classNames(projectcss.all, sty.svg__yzfV)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yaBlN
                      )}
                    >
                      {"31 August, 2024"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame365"}
                    data-plasmic-override={overrides.frame365}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame365)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dsfps
                      )}
                    >
                      {
                        "Top Destinations for Luxury Living: Where to Relocate for the Ultimate Lifestyle Upgrade"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame250"}
                      data-plasmic-override={overrides.frame250}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame250)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xHaol
                        )}
                      >
                        {
                          "Discover the world\u2019s finest destinations for luxury living, where opulence meets lifestyle upgrades and unparalleled experiences await."
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame366"}
                      data-plasmic-override={overrides.frame366}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame366)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nbWwp
                        )}
                      >
                        {"Read More"}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <div
                  data-plasmic-name={"frame6"}
                  data-plasmic-override={overrides.frame6}
                  className={classNames(projectcss.all, sty.frame6)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame367"}
                data-plasmic-override={overrides.frame367}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame367)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ibBFa
                  )}
                >
                  {"Latest Posts"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame368"}
                  data-plasmic-override={overrides.frame368}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame368)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame369"}
                    data-plasmic-override={overrides.frame369}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame369)}
                  >
                    <div
                      data-plasmic-name={"frame9"}
                      data-plasmic-override={overrides.frame9}
                      className={classNames(projectcss.all, sty.frame9)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__joLq1
                      )}
                    >
                      {
                        "Moving Up: Essential Relocation Tips for Transitioning to a High-End Lifestyle"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame370"}
                      data-plasmic-override={overrides.frame370}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame370)}
                    >
                      <div
                        data-plasmic-name={"mingcuteTimeLine2"}
                        data-plasmic-override={overrides.mingcuteTimeLine2}
                        className={classNames(
                          projectcss.all,
                          sty.mingcuteTimeLine2
                        )}
                      >
                        <Group4Icon
                          className={classNames(projectcss.all, sty.svg__z1RLe)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eOFz
                        )}
                      >
                        {"31 August, 2024"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame371"}
                    data-plasmic-override={overrides.frame371}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame371)}
                  >
                    <div
                      data-plasmic-name={"frame10"}
                      data-plasmic-override={overrides.frame10}
                      className={classNames(projectcss.all, sty.frame10)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qEf40
                      )}
                    >
                      {
                        "Moving Up: Essential Relocation Tips for Transitioning to a High-End Lifestyle"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame372"}
                      data-plasmic-override={overrides.frame372}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame372)}
                    >
                      <div
                        data-plasmic-name={"mingcuteTimeLine3"}
                        data-plasmic-override={overrides.mingcuteTimeLine3}
                        className={classNames(
                          projectcss.all,
                          sty.mingcuteTimeLine3
                        )}
                      >
                        <Group4Icon
                          className={classNames(projectcss.all, sty.svg__pXuA8)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oFPdj
                        )}
                      >
                        {"31 August, 2024"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame373"}
                    data-plasmic-override={overrides.frame373}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame373)}
                  >
                    <div
                      data-plasmic-name={"frame11"}
                      data-plasmic-override={overrides.frame11}
                      className={classNames(projectcss.all, sty.frame11)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cmS68
                      )}
                    >
                      {
                        "Moving Up: Essential Relocation Tips for Transitioning to a High-End Lifestyle"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame374"}
                      data-plasmic-override={overrides.frame374}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame374)}
                    >
                      <div
                        data-plasmic-name={"mingcuteTimeLine4"}
                        data-plasmic-override={overrides.mingcuteTimeLine4}
                        className={classNames(
                          projectcss.all,
                          sty.mingcuteTimeLine4
                        )}
                      >
                        <Group4Icon
                          className={classNames(projectcss.all, sty.svg__gydX3)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___27Ln5
                        )}
                      >
                        {"31 August, 2024"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame375"}
                    data-plasmic-override={overrides.frame375}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame375)}
                  >
                    <div
                      data-plasmic-name={"frame12"}
                      data-plasmic-override={overrides.frame12}
                      className={classNames(projectcss.all, sty.frame12)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kiJta
                      )}
                    >
                      {
                        "Moving Up: Essential Relocation Tips for Transitioning to a High-End Lifestyle"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame376"}
                      data-plasmic-override={overrides.frame376}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame376)}
                    >
                      <div
                        data-plasmic-name={"mingcuteTimeLine5"}
                        data-plasmic-override={overrides.mingcuteTimeLine5}
                        className={classNames(
                          projectcss.all,
                          sty.mingcuteTimeLine5
                        )}
                      >
                        <Group4Icon
                          className={classNames(projectcss.all, sty.svg__bYv1Z)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x4RPu
                        )}
                      >
                        {"31 August, 2024"}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame377"}
              data-plasmic-override={overrides.frame377}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame377)}
              id={"contact"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame378"}
                data-plasmic-override={overrides.frame378}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame378)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame264"}
                  data-plasmic-override={overrides.frame264}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame264)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__evoab
                    )}
                  >
                    {"Get in Touch"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"haveAQuestionGetInTouchWithUs"}
                  data-plasmic-override={
                    overrides.haveAQuestionGetInTouchWithUs
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.haveAQuestionGetInTouchWithUs
                  )}
                >
                  {"  Have a question? \nget in touch with Us"}
                </div>
              </Stack__>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  data: {
                    sourceId: "wAqsSVz8TGEZjwD9qTJ4hw",
                    opId: "6e340302-91c3-4cb3-add8-7daafadf59c8",
                    userArgs: {},
                    cacheKey: `plasmic.$.${(() => {
                      try {
                        return "getSchema";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}.$.6e340302-91c3-4cb3-add8-7daafadf59c8.$.`,
                    invalidatedKeys: null,
                    roleId: null
                  },
                  dataFormItems: (() => {
                    const __composite = [
                      {
                        key: "id",
                        inputType: "Number",
                        fieldId: "id",
                        label: "id",
                        name: "id",
                        hidden: null
                      },
                      {
                        key: "name",
                        inputType: "Text",
                        fieldId: "name",
                        label: "name",
                        name: "name",
                        rules: null
                      },
                      {
                        key: "email",
                        inputType: "Text",
                        fieldId: "email",
                        label: "email",
                        name: "email",
                        rules: null
                      },
                      {
                        key: "message",
                        inputType: null,
                        fieldId: "message",
                        label: "message",
                        name: "message",
                        rules: null
                      },
                      {
                        key: "created_at",
                        inputType: "Text",
                        fieldId: "created_at",
                        label: "created_at",
                        name: "created_at",
                        hidden: null
                      }
                    ];
                    __composite["0"]["hidden"] = true;
                    __composite["1"]["rules"] = [
                      {
                        ruleType: "required",
                        message: "please fill name field"
                      },

                      {
                        ruleType: "max",
                        length: 150,
                        message: "enter correct name"
                      }
                    ];

                    __composite["2"]["rules"] = [
                      {
                        ruleType: "required",
                        message: "please fill email field"
                      },

                      {
                        ruleType: "advanced",
                        custom: (rule, value) => {
                          return (() => {
                            const email = $state.form.value.email;
                            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            return emailRegex.test(email);
                          })();
                        },
                        message: "please enter correct emial"
                      }
                    ];

                    __composite["3"]["inputType"] = "Text Area";
                    __composite["3"]["rules"] = [{ ruleType: "required" }];

                    __composite["4"]["hidden"] = true;
                    return __composite;
                  })(),

                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: [],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "simplified",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["defaultSubmit"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "wAqsSVz8TGEZjwD9qTJ4hw",
                              opId: "87c2aefb-1102-49b3-995d-5e08de33b887",
                              userArgs: {
                                variables: [
                                  $state.form.value.email,
                                  $state.form.value.message,
                                  $state.form.value.name
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["defaultSubmit"] != null &&
                      typeof $steps["defaultSubmit"] === "object" &&
                      typeof $steps["defaultSubmit"].then === "function"
                    ) {
                      $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: (
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      loading={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? false
                          : undefined
                      }
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zCms
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  ),
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  />
                );
              })()}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <div
                data-plasmic-name={"frame137"}
                data-plasmic-override={overrides.frame137}
                className={classNames(projectcss.all, sty.frame137)}
              >
                <div
                  data-plasmic-name={"frame135"}
                  data-plasmic-override={overrides.frame135}
                  className={classNames(projectcss.all, sty.frame135)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__naEct)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "70px"
                        : "120px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/koi/images/group2Png.png",
                      fullWidth: 121,
                      fullHeight: 120,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lo37W)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame134"}
                      data-plasmic-override={overrides.frame134}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame134)}
                    >
                      <Stack__
                        as={IcBaselineFacebookIcon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg___9GNp8)}
                        role={"img"}
                      />

                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icBaselineFacebook"}
                        data-plasmic-override={overrides.icBaselineFacebook}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.icBaselineFacebook
                        )}
                      >
                        <RiInstagramFillIcon
                          className={classNames(projectcss.all, sty.svg__v5BfR)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5H3I7
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m8OEg
                        )}
                      >
                        {"\u00a9 2024 All rights reserved."}
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nTgKp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wilKy
                          )}
                        >
                          {"Privacy Policy"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__suWtL
                          )}
                        >
                          {"Terms & Conditions"}
                        </div>
                      </Stack__>
                    </Stack__>
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      href={"https://www.linkedin.com/company/nextstepcode/"}
                      platform={"nextjs"}
                    >
                      {""}
                    </PlasmicLink__>
                  </Stack__>
                </div>
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  koi: [
    "koi",
    "home",
    "hero",
    "nav",
    "frame8",
    "logoKoi",
    "frame7",
    "yacht1",
    "frame354",
    "frame352",
    "frame259",
    "frame3",
    "sliderCarousel",
    "frame241",
    "frame315",
    "frame260",
    "frame240",
    "frame326",
    "group5",
    "frame322",
    "frame323",
    "frame325",
    "frame324",
    "frame242",
    "frame321",
    "frame316",
    "frame261",
    "frame319",
    "frame317",
    "frame318",
    "frame320",
    "frame244",
    "frame333",
    "frame334",
    "frame335",
    "frame247",
    "frame327",
    "frame328",
    "frame329",
    "frame245",
    "frame330",
    "frame331",
    "frame332",
    "frame246",
    "frame336",
    "frame337",
    "frame338",
    "frame248",
    "frame357",
    "frame356",
    "frame342",
    "frame262",
    "sliderCarousel3",
    "frame343",
    "frame344",
    "frame345",
    "frame346",
    "frame347",
    "frame348",
    "frame349",
    "frame350",
    "frame351",
    "frame353",
    "frame355",
    "frame379",
    "frame358",
    "frame5",
    "frame359",
    "frame249",
    "frame360",
    "frame361",
    "frame263",
    "frame362",
    "frame363",
    "frame364",
    "mingcuteTimeLine",
    "frame365",
    "frame250",
    "frame366",
    "frame6",
    "frame367",
    "frame368",
    "frame369",
    "frame9",
    "frame370",
    "mingcuteTimeLine2",
    "frame371",
    "frame10",
    "frame372",
    "mingcuteTimeLine3",
    "frame373",
    "frame11",
    "frame374",
    "mingcuteTimeLine4",
    "frame375",
    "frame12",
    "frame376",
    "mingcuteTimeLine5",
    "frame377",
    "frame378",
    "frame264",
    "haveAQuestionGetInTouchWithUs",
    "form",
    "button",
    "footer",
    "frame137",
    "frame135",
    "frame134",
    "icBaselineFacebook",
    "link"
  ],
  home: [
    "home",
    "hero",
    "nav",
    "frame8",
    "logoKoi",
    "frame7",
    "yacht1",
    "frame354",
    "frame352",
    "frame259",
    "frame3",
    "sliderCarousel",
    "frame241",
    "frame315",
    "frame260",
    "frame240",
    "frame326",
    "group5",
    "frame322",
    "frame323",
    "frame325",
    "frame324",
    "frame242",
    "frame321",
    "frame316",
    "frame261",
    "frame319",
    "frame317",
    "frame318",
    "frame320",
    "frame244",
    "frame333",
    "frame334",
    "frame335",
    "frame247",
    "frame327",
    "frame328",
    "frame329",
    "frame245",
    "frame330",
    "frame331",
    "frame332",
    "frame246",
    "frame336",
    "frame337",
    "frame338",
    "frame248",
    "frame357",
    "frame356",
    "frame342",
    "frame262",
    "sliderCarousel3",
    "frame343",
    "frame344",
    "frame345",
    "frame346",
    "frame347",
    "frame348",
    "frame349",
    "frame350",
    "frame351",
    "frame353",
    "frame355",
    "frame379",
    "frame358",
    "frame5",
    "frame359",
    "frame249",
    "frame360",
    "frame361",
    "frame263",
    "frame362",
    "frame363",
    "frame364",
    "mingcuteTimeLine",
    "frame365",
    "frame250",
    "frame366",
    "frame6",
    "frame367",
    "frame368",
    "frame369",
    "frame9",
    "frame370",
    "mingcuteTimeLine2",
    "frame371",
    "frame10",
    "frame372",
    "mingcuteTimeLine3",
    "frame373",
    "frame11",
    "frame374",
    "mingcuteTimeLine4",
    "frame375",
    "frame12",
    "frame376",
    "mingcuteTimeLine5",
    "frame377",
    "frame378",
    "frame264",
    "haveAQuestionGetInTouchWithUs",
    "form",
    "button",
    "footer",
    "frame137",
    "frame135",
    "frame134",
    "icBaselineFacebook",
    "link"
  ],
  hero: [
    "hero",
    "nav",
    "frame8",
    "logoKoi",
    "frame7",
    "yacht1",
    "frame354",
    "frame352",
    "frame259",
    "frame3",
    "sliderCarousel"
  ],
  nav: ["nav", "frame8", "logoKoi", "frame7"],
  frame8: ["frame8", "logoKoi", "frame7"],
  logoKoi: ["logoKoi"],
  frame7: ["frame7"],
  yacht1: ["yacht1", "frame354", "frame352", "frame259", "frame3"],
  frame354: ["frame354", "frame352", "frame259", "frame3"],
  frame352: ["frame352", "frame259"],
  frame259: ["frame259"],
  frame3: ["frame3"],
  sliderCarousel: ["sliderCarousel"],
  frame241: ["frame241", "frame315", "frame260", "frame240"],
  frame315: ["frame315", "frame260"],
  frame260: ["frame260"],
  frame240: ["frame240"],
  frame326: [
    "frame326",
    "group5",
    "frame322",
    "frame323",
    "frame325",
    "frame324",
    "frame242"
  ],
  group5: ["group5", "frame322", "frame323"],
  frame322: ["frame322"],
  frame323: ["frame323"],
  frame325: ["frame325", "frame324", "frame242"],
  frame324: ["frame324", "frame242"],
  frame242: ["frame242"],
  frame321: [
    "frame321",
    "frame316",
    "frame261",
    "frame319",
    "frame317",
    "frame318",
    "frame320",
    "frame244",
    "frame333",
    "frame334",
    "frame335",
    "frame247",
    "frame327",
    "frame328",
    "frame329",
    "frame245",
    "frame330",
    "frame331",
    "frame332",
    "frame246",
    "frame336",
    "frame337",
    "frame338",
    "frame248"
  ],
  frame316: ["frame316", "frame261"],
  frame261: ["frame261"],
  frame319: [
    "frame319",
    "frame317",
    "frame318",
    "frame320",
    "frame244",
    "frame333",
    "frame334",
    "frame335",
    "frame247",
    "frame327",
    "frame328",
    "frame329",
    "frame245",
    "frame330",
    "frame331",
    "frame332",
    "frame246",
    "frame336",
    "frame337",
    "frame338",
    "frame248"
  ],
  frame317: ["frame317", "frame318", "frame320", "frame244"],
  frame318: ["frame318"],
  frame320: ["frame320"],
  frame244: ["frame244"],
  frame333: ["frame333", "frame334", "frame335", "frame247"],
  frame334: ["frame334"],
  frame335: ["frame335"],
  frame247: ["frame247"],
  frame327: ["frame327", "frame328", "frame329", "frame245"],
  frame328: ["frame328"],
  frame329: ["frame329"],
  frame245: ["frame245"],
  frame330: ["frame330", "frame331", "frame332", "frame246"],
  frame331: ["frame331"],
  frame332: ["frame332"],
  frame246: ["frame246"],
  frame336: ["frame336", "frame337", "frame338", "frame248"],
  frame337: ["frame337"],
  frame338: ["frame338"],
  frame248: ["frame248"],
  frame357: [
    "frame357",
    "frame356",
    "frame342",
    "frame262",
    "sliderCarousel3",
    "frame343",
    "frame344",
    "frame345",
    "frame346",
    "frame347",
    "frame348",
    "frame349",
    "frame350",
    "frame351",
    "frame353",
    "frame355",
    "frame379"
  ],
  frame356: [
    "frame356",
    "frame342",
    "frame262",
    "sliderCarousel3",
    "frame343",
    "frame344",
    "frame345",
    "frame346",
    "frame347",
    "frame348",
    "frame349",
    "frame350",
    "frame351",
    "frame353",
    "frame355",
    "frame379"
  ],
  frame342: ["frame342", "frame262"],
  frame262: ["frame262"],
  sliderCarousel3: [
    "sliderCarousel3",
    "frame343",
    "frame344",
    "frame345",
    "frame346",
    "frame347",
    "frame348",
    "frame349",
    "frame350",
    "frame351",
    "frame353",
    "frame355",
    "frame379"
  ],
  frame343: ["frame343", "frame344"],
  frame344: ["frame344"],
  frame345: ["frame345", "frame346"],
  frame346: ["frame346"],
  frame347: ["frame347", "frame348"],
  frame348: ["frame348"],
  frame349: ["frame349", "frame350"],
  frame350: ["frame350"],
  frame351: ["frame351", "frame353"],
  frame353: ["frame353"],
  frame355: ["frame355", "frame379"],
  frame379: ["frame379"],
  frame358: ["frame358", "frame5", "frame359", "frame249"],
  frame5: ["frame5"],
  frame359: ["frame359", "frame249"],
  frame249: ["frame249"],
  frame360: [
    "frame360",
    "frame361",
    "frame263",
    "frame362",
    "frame363",
    "frame364",
    "mingcuteTimeLine",
    "frame365",
    "frame250",
    "frame366",
    "frame6",
    "frame367",
    "frame368",
    "frame369",
    "frame9",
    "frame370",
    "mingcuteTimeLine2",
    "frame371",
    "frame10",
    "frame372",
    "mingcuteTimeLine3",
    "frame373",
    "frame11",
    "frame374",
    "mingcuteTimeLine4",
    "frame375",
    "frame12",
    "frame376",
    "mingcuteTimeLine5"
  ],
  frame361: ["frame361", "frame263"],
  frame263: ["frame263"],
  frame362: [
    "frame362",
    "frame363",
    "frame364",
    "mingcuteTimeLine",
    "frame365",
    "frame250",
    "frame366",
    "frame6"
  ],
  frame363: [
    "frame363",
    "frame364",
    "mingcuteTimeLine",
    "frame365",
    "frame250",
    "frame366"
  ],
  frame364: ["frame364", "mingcuteTimeLine"],
  mingcuteTimeLine: ["mingcuteTimeLine"],
  frame365: ["frame365", "frame250", "frame366"],
  frame250: ["frame250"],
  frame366: ["frame366"],
  frame6: ["frame6"],
  frame367: [
    "frame367",
    "frame368",
    "frame369",
    "frame9",
    "frame370",
    "mingcuteTimeLine2",
    "frame371",
    "frame10",
    "frame372",
    "mingcuteTimeLine3",
    "frame373",
    "frame11",
    "frame374",
    "mingcuteTimeLine4",
    "frame375",
    "frame12",
    "frame376",
    "mingcuteTimeLine5"
  ],
  frame368: [
    "frame368",
    "frame369",
    "frame9",
    "frame370",
    "mingcuteTimeLine2",
    "frame371",
    "frame10",
    "frame372",
    "mingcuteTimeLine3",
    "frame373",
    "frame11",
    "frame374",
    "mingcuteTimeLine4",
    "frame375",
    "frame12",
    "frame376",
    "mingcuteTimeLine5"
  ],
  frame369: ["frame369", "frame9", "frame370", "mingcuteTimeLine2"],
  frame9: ["frame9"],
  frame370: ["frame370", "mingcuteTimeLine2"],
  mingcuteTimeLine2: ["mingcuteTimeLine2"],
  frame371: ["frame371", "frame10", "frame372", "mingcuteTimeLine3"],
  frame10: ["frame10"],
  frame372: ["frame372", "mingcuteTimeLine3"],
  mingcuteTimeLine3: ["mingcuteTimeLine3"],
  frame373: ["frame373", "frame11", "frame374", "mingcuteTimeLine4"],
  frame11: ["frame11"],
  frame374: ["frame374", "mingcuteTimeLine4"],
  mingcuteTimeLine4: ["mingcuteTimeLine4"],
  frame375: ["frame375", "frame12", "frame376", "mingcuteTimeLine5"],
  frame12: ["frame12"],
  frame376: ["frame376", "mingcuteTimeLine5"],
  mingcuteTimeLine5: ["mingcuteTimeLine5"],
  frame377: [
    "frame377",
    "frame378",
    "frame264",
    "haveAQuestionGetInTouchWithUs",
    "form",
    "button"
  ],
  frame378: ["frame378", "frame264", "haveAQuestionGetInTouchWithUs"],
  frame264: ["frame264"],
  haveAQuestionGetInTouchWithUs: ["haveAQuestionGetInTouchWithUs"],
  form: ["form", "button"],
  button: ["button"],
  footer: [
    "footer",
    "frame137",
    "frame135",
    "frame134",
    "icBaselineFacebook",
    "link"
  ],
  frame137: ["frame137", "frame135", "frame134", "icBaselineFacebook", "link"],
  frame135: ["frame135", "frame134", "icBaselineFacebook", "link"],
  frame134: ["frame134", "icBaselineFacebook"],
  icBaselineFacebook: ["icBaselineFacebook"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  koi: "div";
  home: "div";
  hero: "div";
  nav: "div";
  frame8: "div";
  logoKoi: typeof LogoKoi;
  frame7: "div";
  yacht1: "div";
  frame354: "div";
  frame352: "div";
  frame259: "div";
  frame3: "div";
  sliderCarousel: typeof SliderWrapper;
  frame241: "div";
  frame315: "div";
  frame260: "div";
  frame240: "div";
  frame326: "div";
  group5: "div";
  frame322: "div";
  frame323: "div";
  frame325: "div";
  frame324: "div";
  frame242: "div";
  frame321: "div";
  frame316: "div";
  frame261: "div";
  frame319: "div";
  frame317: "div";
  frame318: "div";
  frame320: "div";
  frame244: "div";
  frame333: "div";
  frame334: "div";
  frame335: "div";
  frame247: "div";
  frame327: "div";
  frame328: "div";
  frame329: "div";
  frame245: "div";
  frame330: "div";
  frame331: "div";
  frame332: "div";
  frame246: "div";
  frame336: "div";
  frame337: "div";
  frame338: "div";
  frame248: "div";
  frame357: "div";
  frame356: "div";
  frame342: "div";
  frame262: "div";
  sliderCarousel3: typeof SliderWrapper;
  frame343: "div";
  frame344: "div";
  frame345: "div";
  frame346: "div";
  frame347: "div";
  frame348: "div";
  frame349: "div";
  frame350: "div";
  frame351: "div";
  frame353: "div";
  frame355: "div";
  frame379: "div";
  frame358: "div";
  frame5: "div";
  frame359: "div";
  frame249: "div";
  frame360: "div";
  frame361: "div";
  frame263: "div";
  frame362: "div";
  frame363: "div";
  frame364: "div";
  mingcuteTimeLine: "div";
  frame365: "div";
  frame250: "div";
  frame366: "div";
  frame6: "div";
  frame367: "div";
  frame368: "div";
  frame369: "div";
  frame9: "div";
  frame370: "div";
  mingcuteTimeLine2: "div";
  frame371: "div";
  frame10: "div";
  frame372: "div";
  mingcuteTimeLine3: "div";
  frame373: "div";
  frame11: "div";
  frame374: "div";
  mingcuteTimeLine4: "div";
  frame375: "div";
  frame12: "div";
  frame376: "div";
  mingcuteTimeLine5: "div";
  frame377: "div";
  frame378: "div";
  frame264: "div";
  haveAQuestionGetInTouchWithUs: "div";
  form: typeof FormWrapper;
  button: typeof AntdButton;
  footer: "div";
  frame137: "div";
  frame135: "div";
  frame134: "div";
  icBaselineFacebook: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "koi") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("koi"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    hero: makeNodeComponent("hero"),
    nav: makeNodeComponent("nav"),
    frame8: makeNodeComponent("frame8"),
    logoKoi: makeNodeComponent("logoKoi"),
    frame7: makeNodeComponent("frame7"),
    yacht1: makeNodeComponent("yacht1"),
    frame354: makeNodeComponent("frame354"),
    frame352: makeNodeComponent("frame352"),
    frame259: makeNodeComponent("frame259"),
    frame3: makeNodeComponent("frame3"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    frame241: makeNodeComponent("frame241"),
    frame315: makeNodeComponent("frame315"),
    frame260: makeNodeComponent("frame260"),
    frame240: makeNodeComponent("frame240"),
    frame326: makeNodeComponent("frame326"),
    group5: makeNodeComponent("group5"),
    frame322: makeNodeComponent("frame322"),
    frame323: makeNodeComponent("frame323"),
    frame325: makeNodeComponent("frame325"),
    frame324: makeNodeComponent("frame324"),
    frame242: makeNodeComponent("frame242"),
    frame321: makeNodeComponent("frame321"),
    frame316: makeNodeComponent("frame316"),
    frame261: makeNodeComponent("frame261"),
    frame319: makeNodeComponent("frame319"),
    frame317: makeNodeComponent("frame317"),
    frame318: makeNodeComponent("frame318"),
    frame320: makeNodeComponent("frame320"),
    frame244: makeNodeComponent("frame244"),
    frame333: makeNodeComponent("frame333"),
    frame334: makeNodeComponent("frame334"),
    frame335: makeNodeComponent("frame335"),
    frame247: makeNodeComponent("frame247"),
    frame327: makeNodeComponent("frame327"),
    frame328: makeNodeComponent("frame328"),
    frame329: makeNodeComponent("frame329"),
    frame245: makeNodeComponent("frame245"),
    frame330: makeNodeComponent("frame330"),
    frame331: makeNodeComponent("frame331"),
    frame332: makeNodeComponent("frame332"),
    frame246: makeNodeComponent("frame246"),
    frame336: makeNodeComponent("frame336"),
    frame337: makeNodeComponent("frame337"),
    frame338: makeNodeComponent("frame338"),
    frame248: makeNodeComponent("frame248"),
    frame357: makeNodeComponent("frame357"),
    frame356: makeNodeComponent("frame356"),
    frame342: makeNodeComponent("frame342"),
    frame262: makeNodeComponent("frame262"),
    sliderCarousel3: makeNodeComponent("sliderCarousel3"),
    frame343: makeNodeComponent("frame343"),
    frame344: makeNodeComponent("frame344"),
    frame345: makeNodeComponent("frame345"),
    frame346: makeNodeComponent("frame346"),
    frame347: makeNodeComponent("frame347"),
    frame348: makeNodeComponent("frame348"),
    frame349: makeNodeComponent("frame349"),
    frame350: makeNodeComponent("frame350"),
    frame351: makeNodeComponent("frame351"),
    frame353: makeNodeComponent("frame353"),
    frame355: makeNodeComponent("frame355"),
    frame379: makeNodeComponent("frame379"),
    frame358: makeNodeComponent("frame358"),
    frame5: makeNodeComponent("frame5"),
    frame359: makeNodeComponent("frame359"),
    frame249: makeNodeComponent("frame249"),
    frame360: makeNodeComponent("frame360"),
    frame361: makeNodeComponent("frame361"),
    frame263: makeNodeComponent("frame263"),
    frame362: makeNodeComponent("frame362"),
    frame363: makeNodeComponent("frame363"),
    frame364: makeNodeComponent("frame364"),
    mingcuteTimeLine: makeNodeComponent("mingcuteTimeLine"),
    frame365: makeNodeComponent("frame365"),
    frame250: makeNodeComponent("frame250"),
    frame366: makeNodeComponent("frame366"),
    frame6: makeNodeComponent("frame6"),
    frame367: makeNodeComponent("frame367"),
    frame368: makeNodeComponent("frame368"),
    frame369: makeNodeComponent("frame369"),
    frame9: makeNodeComponent("frame9"),
    frame370: makeNodeComponent("frame370"),
    mingcuteTimeLine2: makeNodeComponent("mingcuteTimeLine2"),
    frame371: makeNodeComponent("frame371"),
    frame10: makeNodeComponent("frame10"),
    frame372: makeNodeComponent("frame372"),
    mingcuteTimeLine3: makeNodeComponent("mingcuteTimeLine3"),
    frame373: makeNodeComponent("frame373"),
    frame11: makeNodeComponent("frame11"),
    frame374: makeNodeComponent("frame374"),
    mingcuteTimeLine4: makeNodeComponent("mingcuteTimeLine4"),
    frame375: makeNodeComponent("frame375"),
    frame12: makeNodeComponent("frame12"),
    frame376: makeNodeComponent("frame376"),
    mingcuteTimeLine5: makeNodeComponent("mingcuteTimeLine5"),
    frame377: makeNodeComponent("frame377"),
    frame378: makeNodeComponent("frame378"),
    frame264: makeNodeComponent("frame264"),
    haveAQuestionGetInTouchWithUs: makeNodeComponent(
      "haveAQuestionGetInTouchWithUs"
    ),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    frame137: makeNodeComponent("frame137"),
    frame135: makeNodeComponent("frame135"),
    frame134: makeNodeComponent("frame134"),
    icBaselineFacebook: makeNodeComponent("icBaselineFacebook"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "KOI",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/1d112a1073e418d97abb21b5cfcace49.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
